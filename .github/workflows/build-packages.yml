name: Build and Release Packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-deb:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper devscripts build-essential
      
      - name: Build Debian package
        run: |
          # Create proper debian package structure
          mkdir -p debian/piphub/usr/bin
          mkdir -p debian/piphub/DEBIAN
          
          # Copy scripts
          cp piphub.bash debian/piphub/usr/bin/piphub-bash
          cp piphub.ps1 debian/piphub/usr/bin/piphub-ps
          chmod +x debian/piphub/usr/bin/piphub-bash
          chmod +x debian/piphub/usr/bin/piphub-ps
          
          # Create symlink for default command
          ln -sf piphub-bash debian/piphub/usr/bin/piphub
          
          # Get version from tag or use default for manual dispatch
          if [[ "$GITHUB_REF" =~ refs/tags/v(.+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            VERSION="1.0.0"
          fi
          echo "Building package for version: $VERSION"
          
          # Create control file
          cat > debian/piphub/DEBIAN/control << EOF
          Package: piphub
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: all
          Depends: bash (>= 4.0), git, gh, python3, python3-pip
          Maintainer: ltanedo <lloydtan@buffalo.edu>
          Description: GitHub release automation tools
           PipHub provides command-line tools for automating GitHub releases
           and Python package publishing.
          EOF
          
          # Build the package
          dpkg-deb --build debian/piphub
          mv debian/piphub.deb piphub_${VERSION}_all.deb
      
      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: "*.deb"

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Windows installer structure
        shell: pwsh
        run: |
          # Create directory structure
          New-Item -ItemType Directory -Force -Path "windows-package/bin"
          New-Item -ItemType Directory -Force -Path "windows-package/scripts"
          
          # Copy scripts
          Copy-Item "piphub.bash" "windows-package/bin/piphub-bash"
          Copy-Item "piphub.ps1" "windows-package/bin/piphub-ps.ps1"
          
          # Create batch wrapper for bash script (for WSL)
          @'
          @echo off
          wsl bash -c "$(wslpath '%~dp0piphub-bash') %*"
          '@ | Out-File -FilePath "windows-package/bin/piphub-bash.bat" -Encoding ascii
          
          # Create batch wrapper for PowerShell script
          @'
          @echo off
          powershell -ExecutionPolicy Bypass -File "%~dp0piphub-ps.ps1" %*
          '@ | Out-File -FilePath "windows-package/bin/piphub.bat" -Encoding ascii
      
      - name: Create portable ZIP
        shell: pwsh
        run: |
          # Get version from workflow dispatch or use default
          if ($env:GITHUB_REF -match 'refs/tags/v(.+)') {
            $version = $matches[1]
          } else {
            $version = "1.0.0"
          }
          Write-Host "Creating ZIP for version: $version"
          Compress-Archive -Path "windows-package\*" -DestinationPath "piphub-windows-$version.zip"
      
      - name: Upload Windows package
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: "*.zip"

  create-release:
    needs: [build-deb, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Set release tag
        id: tag
        run: |
          if [[ "$GITHUB_REF" =~ refs/tags/v(.+) ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "tag=v1.0.0" >> $GITHUB_OUTPUT
            echo "version=1.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "PipHub ${{ steps.tag.outputs.version }}"
          draft: false
          prerelease: false
          files: |
            debian-package/*.deb
            windows-package/*.zip
          body: |
            ## Installation Instructions

            ### Linux (Debian/Ubuntu)
            ```bash
            # Download and install the .deb package
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/piphub_${{ steps.tag.outputs.version }}_all.deb
            sudo dpkg -i piphub_${{ steps.tag.outputs.version }}_all.deb

            # Or install dependencies if needed
            sudo apt-get install -f
            ```

            ### Windows
            ```powershell
            # Download and extract the ZIP file
            Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/piphub-windows-${{ steps.tag.outputs.version }}.zip" -OutFile "piphub.zip"
            Expand-Archive -Path "piphub.zip" -DestinationPath "C:\Program Files\piphub"
            # Add C:\Program Files\piphub\bin to your PATH
            ```
            
            ### Usage
            ```bash
            # Linux/WSL
            piphub              # Uses bash version
            piphub-bash         # Explicitly use bash version
            
            # Windows
            piphub.bat          # Default (PowerShell version)
            piphub-bash.bat     # Uses WSL bash version
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
