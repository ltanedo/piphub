name: Build and Release Packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-deb:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper devscripts build-essential
      
      - name: Build Debian package
        run: |
          # Create proper debian package structure
          mkdir -p debian/piphub/usr/bin
          mkdir -p debian/piphub/DEBIAN
          
          # Copy scripts
          cp piphub.bash debian/piphub/usr/bin/piphub
          cp piphub.ps1 debian/piphub/usr/bin/piphub-ps
          chmod +x debian/piphub/usr/bin/piphub
          chmod +x debian/piphub/usr/bin/piphub-ps
          
          # Get version from tag or use default for manual dispatch
          if [[ "$GITHUB_REF" =~ refs/tags/v(.+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            VERSION="1.0.0"
          fi
          echo "Building package for version: $VERSION"
          
          # Create control file
          cat > debian/piphub/DEBIAN/control << EOF
          Package: piphub
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: all
          Depends: bash (>= 4.0), git, python3
          Recommends: gh, python3-pip
          Maintainer: ltanedo <lloydtan@buffalo.edu>
          Description: GitHub release automation tools
           PipHub provides command-line tools for automating GitHub releases
           and Python package publishing. Requires gh and python3-pip for full functionality.
          EOF
          
          # Build the package
          dpkg-deb --build debian/piphub
          mv debian/piphub.deb piphub_${VERSION}_all.deb
      
      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: "*.deb"

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Windows installer structure
        shell: pwsh
        run: |
          # Create directory structure
          New-Item -ItemType Directory -Force -Path "windows-package/bin"
          New-Item -ItemType Directory -Force -Path "windows-package/scripts"
          
          # Copy PowerShell script only
          Copy-Item "piphub.ps1" "windows-package/bin/piphub-ps.ps1"
          
          # Create main piphub command (CMD files can be called without extension)
          @'
          @echo off
          powershell -ExecutionPolicy Bypass -File "%~dp0piphub-ps.ps1" %*
          '@ | Out-File -FilePath "windows-package/bin/piphub.cmd" -Encoding ascii

          # Also create .bat version for compatibility
          @'
          @echo off
          powershell -ExecutionPolicy Bypass -File "%~dp0piphub-ps.ps1" %*
          '@ | Out-File -FilePath "windows-package/bin/piphub.bat" -Encoding ascii
      
      - name: Create portable ZIP
        shell: pwsh
        run: |
          # Get version from workflow dispatch or use default
          if ($env:GITHUB_REF -match 'refs/tags/v(.+)') {
            $version = $matches[1]
          } else {
            $version = "1.0.0"
          }
          Write-Host "Creating ZIP for version: $version"
          Compress-Archive -Path "windows-package\*" -DestinationPath "piphub-windows-$version.zip"
      
      - name: Upload Windows package
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: "*.zip"

  create-release:
    needs: [build-deb, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Debug artifacts and files
        run: |
          echo "=== Current directory ==="
          pwd
          ls -la

          echo "=== Checking for artifact directories ==="
          ls -la debian-package/ 2>/dev/null || echo "debian-package directory not found"
          ls -la windows-package/ 2>/dev/null || echo "windows-package directory not found"

          echo "=== Looking for .deb files ==="
          find . -name "*.deb" -type f 2>/dev/null || echo "No .deb files found"

          echo "=== Looking for .zip files ==="
          find . -name "*.zip" -type f 2>/dev/null || echo "No .zip files found"

          echo "=== All files in current directory ==="
          find . -type f | head -20
      
      - name: Set release tag
        id: tag
        run: |
          if [[ "$GITHUB_REF" =~ refs/tags/v(.+) ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            # For manual dispatch, create a default tag
            echo "tag=v1.0.0" >> $GITHUB_OUTPUT
            echo "version=1.0.0" >> $GITHUB_OUTPUT
          fi
          echo "Using tag: $(cat $GITHUB_OUTPUT | grep tag= | cut -d= -f2)"
          echo "Using version: $(cat $GITHUB_OUTPUT | grep version= | cut -d= -f2)"

      - name: Check and delete existing release
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          echo "Checking for existing release: $TAG"

          # Check if release exists
          if gh release view "$TAG" --repo "${{ github.repository }}" >/dev/null 2>&1; then
            echo "Release $TAG exists. Deleting it..."
            gh release delete "$TAG" --repo "${{ github.repository }}" --yes
            echo "Release $TAG deleted successfully"
          else
            echo "No existing release found for $TAG"
          fi

          # Check if tag exists and delete it
          if git tag -l "$TAG" | grep -q "^$TAG$"; then
            echo "Tag $TAG exists. Deleting it..."
            git tag -d "$TAG" || true
            git push origin ":refs/tags/$TAG" || true
            echo "Tag $TAG deleted successfully"
          else
            echo "No existing tag found for $TAG"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "PipHub ${{ steps.tag.outputs.version }}"
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: false
          fail_on_unmatched_files: false
          files: |
            debian-package/*.deb
            windows-package/*.zip
          body: |
            ## Installation Instructions

            ### Linux (Debian/Ubuntu)
            ```bash
            # Download and install the .deb package
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/piphub_${{ steps.tag.outputs.version }}_all.deb
            sudo dpkg -i piphub_${{ steps.tag.outputs.version }}_all.deb

            # Or install dependencies if needed
            sudo apt-get install -f
            ```

            ### Windows
            ```powershell
            # Download and extract the ZIP file
            Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/piphub-windows-${{ steps.tag.outputs.version }}.zip" -OutFile "piphub.zip"
            Expand-Archive -Path "piphub.zip" -DestinationPath "C:\Program Files\piphub"
            # Add C:\Program Files\piphub\bin to your PATH
            ```
            
            ### Usage
            ```bash
            # Linux
            piphub              # Uses bash version

            # Windows
            piphub              # Uses PowerShell version
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug release creation
        if: failure()
        run: |
          echo "Release creation failed. Debugging info:"
          echo "Tag: ${{ steps.tag.outputs.tag }}"
          echo "Version: ${{ steps.tag.outputs.version }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          ls -la debian-package/ || echo "No debian-package directory"
          ls -la windows-package/ || echo "No windows-package directory"
